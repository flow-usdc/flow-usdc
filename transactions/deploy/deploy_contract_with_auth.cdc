// This transactions deploys the FiatToken contract
//
// Owner (AuthAccount) of this script is the owner of the contract
//
transaction(
    contractName: String, 
    code: String,
    VaultStoragePath: StoragePath,
    VaultBalancePubPath: PublicPath,
    VaultUUIDPubPath: PublicPath,
    VaultReceiverPubPath: PublicPath,
    BlocklistExecutorStoragePath: StoragePath,
    BlocklisterStoragePath: StoragePath,
    BlocklisterCapReceiverPubPath: PublicPath,
    BlocklisterUUIDPubPath: PublicPath,
    BlocklisterPubSigner: PublicPath,
    PauseExecutorStoragePath: StoragePath,
    PauserStoragePath: StoragePath,
    PauserCapReceiverPubPath: PublicPath,
    PauserUUIDPubPath: PublicPath,
    PauserPubSigner: PublicPath,
    AdminExecutorStoragePath: StoragePath,
    AdminStoragePath: StoragePath,
    AdminCapReceiverPubPath: PublicPath,
    AdminUUIDPubPath: PublicPath,
    AdminPubSigner: PublicPath,
    OwnerExecutorStoragePath: StoragePath,
    OwnerStoragePath: StoragePath,
    OwnerCapReceiverPubPath: PublicPath,
    OwnerUUIDPubPath: PublicPath,
    OwnerPubSigner: PublicPath,
    MasterMinterExecutorStoragePath: StoragePath,
    MasterMinterStoragePath: StoragePath,
    MasterMinterCapReceiverPubPath: PublicPath,
    MasterMinterPubSigner: PublicPath,
    MasterMinterUUIDPubPath: PublicPath,
    MinterControllerStoragePath: StoragePath,
    MinterControllerUUIDPubPath: PublicPath,
    MinterControllerPubSigner: PublicPath,
    MinterStoragePath: StoragePath,
    MinterUUIDPubPath: PublicPath,
    initialAdminCapabilityPrivPath: PrivatePath,
    initialOwnerCapabilityPrivPath: PrivatePath,
    initialMasterMinterCapabilityPrivPath: PrivatePath,
    initialPauserCapabilityPrivPath: PrivatePath,
    initialBlocklisterCapabilityPrivPath: PrivatePath,
    tokenName: String,
    version: String,
    initTotalSupply: UFix64,
    initPaused: Bool,
    adminAccountPubKeys: [String],
    adminAccountKeyWeights: [UFix64],
    adminAccountKeyAlgos: [UInt8],
    ownerAccountPubKeys: [String],
    ownerAccountKeyWeights: [UFix64],
    ownerAccountKeyAlgos: [UInt8],
    masterMinterAccountPubKeys: [String],
    masterMinterAccountKeyWeights: [UFix64],
    masterMinterAccountKeyAlgos: [UInt8],
    blocklisterAccountPubKeys: [String],
    blocklisterAccountKeyWeights: [UFix64],
    blocklisterAccountKeyAlgos: [UInt8],
    pauserAccountPubKeys: [String],
    pauserAccountKeyWeights: [UFix64],
    pauserAccountKeyAlgos: [UInt8],
) {
    prepare(contractAccount: AuthAccount) {
        let existingContract = contractAccount.contracts.get(name: contractName)

        if (existingContract == nil) {
            contractAccount.contracts.add(
                name: contractName, 
                code: code.decodeHex(), 
                contractAccount,
                VaultStoragePath: VaultStoragePath,
                VaultBalancePubPath: VaultBalancePubPath,
                VaultUUIDPubPath: VaultUUIDPubPath,
                VaultReceiverPubPath: VaultReceiverPubPath,
                BlocklistExecutorStoragePath: BlocklistExecutorStoragePath,
                BlocklisterStoragePath: BlocklisterStoragePath,
                BlocklisterCapReceiverPubPath: BlocklisterCapReceiverPubPath,
                BlocklisterUUIDPubPath: BlocklisterUUIDPubPath,
                BlocklisterPubSigner: BlocklisterPubSigner,
                PauseExecutorStoragePath: PauseExecutorStoragePath,
                PauserStoragePath: PauserStoragePath,
                PauserCapReceiverPubPath: PauserCapReceiverPubPath,
                PauserUUIDPubPath: PauserUUIDPubPath,
                PauserPubSigner: PauserPubSigner,
                AdminExecutorStoragePath: AdminExecutorStoragePath,
                AdminStoragePath: AdminStoragePath,
                AdminCapReceiverPubPath: AdminCapReceiverPubPath,
                AdminUUIDPubPath: AdminUUIDPubPath,
                AdminPubSigner: AdminPubSigner,
                OwnerExecutorStoragePath: OwnerExecutorStoragePath,
                OwnerStoragePath: OwnerStoragePath,
                OwnerCapReceiverPubPath: OwnerCapReceiverPubPath,
                OwnerUUIDPubPath: OwnerUUIDPubPath,
                OwnerPubSigner: OwnerPubSigner,
                MasterMinterExecutorStoragePath: MasterMinterExecutorStoragePath,
                MasterMinterStoragePath: MasterMinterStoragePath,
                MasterMinterCapReceiverPubPath: MasterMinterCapReceiverPubPath,
                MasterMinterPubSigner: MasterMinterPubSigner,
                MasterMinterUUIDPubPath: MasterMinterUUIDPubPath,
                MinterControllerStoragePath:  MinterControllerStoragePath,
                MinterControllerUUIDPubPath: MinterControllerUUIDPubPath,
                MinterControllerPubSigner: MinterControllerPubSigner,
                MinterStoragePath: MinterStoragePath,
                MinterUUIDPubPath: MinterUUIDPubPath,
                initialAdminCapabilityPrivPath: initialAdminCapabilityPrivPath,
                initialOwnerCapabilityPrivPath: initialOwnerCapabilityPrivPath,
                initialMasterMinterCapabilityPrivPath: initialMasterMinterCapabilityPrivPath,
                initialPauserCapabilityPrivPath: initialPauserCapabilityPrivPath,
                initialBlocklisterCapabilityPrivPath: initialBlocklisterCapabilityPrivPath,
                tokenName: tokenName,
                version: version,
                initTotalSupply: initTotalSupply,
                initPaused: initPaused,
                adminAccountPubKeys: adminAccountPubKeys,
                adminAccountKeyWeights: adminAccountKeyWeights,
                adminAccountKeyAlgos: adminAccountKeyAlgos,
                ownerAccountPubKeys: ownerAccountPubKeys,
                ownerAccountKeyWeights: ownerAccountKeyWeights,
                ownerAccountKeyAlgos: ownerAccountKeyAlgos,
                masterMinterAccountPubKeys: masterMinterAccountPubKeys,
                masterMinterAccountKeyWeights: masterMinterAccountKeyWeights,
                masterMinterAccountKeyAlgos: masterMinterAccountKeyAlgos,
                blocklisterAccountPubKeys: blocklisterAccountPubKeys,
                blocklisterAccountKeyWeights: blocklisterAccountKeyWeights,
                blocklisterAccountKeyAlgos: blocklisterAccountKeyAlgos,
                pauserAccountPubKeys: pauserAccountPubKeys,
                pauserAccountKeyWeights: pauserAccountKeyWeights,
                pauserAccountKeyAlgos: pauserAccountKeyAlgos,
            )
        } else {
            contractAccount.contracts.update__experimental(name: contractName, code: code.decodeHex())
        }
    }
}
